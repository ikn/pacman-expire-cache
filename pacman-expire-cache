#! /usr/bin/env bash

# Distributed under the terms of the BSD 3-Clause license.

# A tool for deleting old cached package files for the `pacman` package manager.

# TODO: tests

PROGRAM="pacman-expire-cache"
VERSION="0.1-next"
SHORT_OPTIONS="hd:c:nv"
LONG_OPTIONS="version,help,max-age:,\
    retain-extra-installed:,retain-extra-notinstalled:,retain-extra:,
    cache-dir:,dry-run,verbose"
ERR_OTHER=1
ERR_USAGE=2
ERR_FILE=3

option_max_age=30
option_retain_extra_installed=0
option_retain_extra_notinstalled=0
default_cache_dir="/var/cache/pacman/pkg"
option_cache_dirs=()
option_dry_run=n
option_verbose=n


err () {
    code="$1"
    shift
    echo >&2 "$PROGRAM: error:" "$@"
    exit "$code"
}


usage_err () {
    if [ "$#" -gt 0 ]; then
        echo >&2 "$PROGRAM: error:" "$@"
    fi
    echo >&2
    echo >&2 "Call with \`--help' to display usage information."
    exit "$ERR_USAGE"
}


print_error () {
    echo >&2 "error:" "$@"
}


print_verbose () {
    if [ "$option_verbose" = y ]; then
        echo >&2 "$@"
    fi
}


print_version () {
    echo "$PROGRAM $VERSION"
}


print_help () {
    print_version
    echo
    echo "Expire old packages from the pacman package manager's cache directory."
    echo
    echo "Uses only the modification time of package files to determine what to delete,"
    echo "not package version strings."
    echo
    echo "Usage: $PROGRAM [OPTION]... [DIR]..."
    echo
    echo "DIR arguments are directories in which to find package files; if you want to"
    echo "expire both the main cache and AUR helper caches, you should specify all"
    echo "directories in a single invocation, where possible.  If no DIR arguments are"
    echo "specified, only the main cache (/var/cache/pacman/pkg) is cleared.  Behaviour"
    echo "is undefined in the case that the same directory is specified more than once."
    echo
    echo "Options:"
    echo "  -d DAYS, --max-age=DAYS"
    echo "                    delete files older than this (default: 30)"
    echo "  --retain-extra-installed=NUMBER"
    echo "                    retain this many recent files older than --max-age, for each"
    echo "                    currently installed package (default: 0)"
    echo "  --retain-extra-notinstalled=NUMBER"
    echo "                    retain this many recent files older than --max-age, for each"
    echo "                    package not currently installed (default: 0)"
    echo "  --retain-extra=NUMBER"
    echo "                    set both --retain-extra-installed and"
    echo "                    --retain-extra-notinstalled to the same value"
    echo "  -c PATH, --cache-dir=PATH"
    echo "                    deprecated option; provided for backwards compatibility"
    echo "  -n, --dry-run     do not delete any files, but perform all checks and display"
    echo "                    normal output"
    echo "  -v, --verbose     include informational output for each package file"
    echo "  -h, --help        display this help and exit"
    echo "  --version         display version information and exit"
}


# combine all the error codes given as arguments into a single error code
combine_errors () {
    local final_err=0
    local err
    for err in "$@"; do
        if [ "$err" -eq 0 ] || [ "$final_err" -eq "$err" ]; then
            true
        elif [ "$final_err" -eq 0 ]; then
            final_err="$err"
        elif [ "$err" -ne 3 ]; then
            final_err="$ERR_OTHER"
        fi
    done
    return "$final_err"
}


validate_max_age () {
    [[ "$option_max_age" =~ ^[0-9]{1,4}$ ]] || {
        usage_err "--max-age: not a whole number between 0 and 9999:" \
            "'$option_max_age'"
    }
}


validate_retain_extra () {
    [[ "$option_retain_extra_installed" =~ ^[0-9]{1,2}$ ]] || {
        usage_err "--retain-extra-installed: not a whole number " \
            "between 0 and 99: '$option_retain_extra_installed'"
    }
    [[ "$option_retain_extra_notinstalled" =~ ^[0-9]{1,2}$ ]] || {
        usage_err "--retain-extra-notinstalled: not a whole number " \
            "between 0 and 99: '$option_retain_extra_notinstalled'"
    }
}


validate_cache_dir () {
    local dir
    for dir in "${option_cache_dirs[@]}"; do
        [ -d "$dir" ] || {
            usage_err "cache dir: not a directory: '$dir'"
        }
    done
}


read_options () {
    while true; do
        case "$1" in
            '--version')
                print_version
                exit 0
                ;;
            '-h'|'--help')
                print_help
                exit 0
                ;;
            '-d'|'--max-age')
                option_max_age="$2"
                shift 2
                ;;
            '--retain-extra-installed')
                option_retain_extra_installed="$2"
                shift 2
                ;;
            '--retain-extra-notinstalled')
                option_retain_extra_notinstalled="$2"
                shift 2
                ;;
            '--retain-extra')
                option_retain_extra_installed="$2"
                option_retain_extra_notinstalled="$2"
                shift 2
                ;;
            '-c'|'--cache-dir')
                option_cache_dirs+=("$2")
                shift 2
                ;;
            '-n'|'--dry-run')
                option_dry_run=y
                shift
                ;;
            '-v'|'--verbose')
                option_verbose=y
                shift
                ;;
            '--')
                shift
                break
                ;;
        esac
    done

    local dir
    for dir in "$@"; do
        option_cache_dirs+=("$dir")
    done
    if [ "${#option_cache_dirs[@]}" -eq 0 ]; then
        option_cache_dirs+=("$default_cache_dir")
    fi

    validate_max_age
    validate_retain_extra
    validate_cache_dir
}


expire_cache () {
    # convert option_max_age to unixtime
    local now_unix="$(date +%s)"
    local mtime_threshold="$((now_unix - option_max_age * 24 * 60 * 60))"
    local error_pkg_name="-"

    {
        local dir
        for dir in "${option_cache_dirs[@]}"; do
            {
                ls "$dir" || exit "$ERR_OTHER"
            } | {
                local file_name
                while read -r file_name; do

                    local pkg_name
                    pkg_name="$(pacman -Qq --file "$dir/$file_name")" || {
                        print_error "failed for file:" "$dir/$file_name"
                        echo "$error_pkg_name - $dir/$file_name"
                        continue
                    }

                    local mtime
                    mtime="$(stat --format %Y "$dir/$file_name")" || {
                        print_error "failed for file:" "$dir/$file_name"
                        echo "$error_pkg_name - $dir/$file_name"
                        continue
                    }

                    echo "$pkg_name $mtime $dir/$file_name"

                done
            }

            combine_errors "${PIPESTATUS[@]}"
        done

    # sort: package name asc, mtime desc numerically
    } | sort --key 1,1 --key 2,2nr | {

        local file_line
        local file_pkg_name
        local file_mtime
        local file_path
        local pkg_name
        local pkg_retain_extra
        local pkg_files_retained
        local pacman_err
        local final_err=0
        local action

        while read -r file_line; do
            file_pkg_name="$(echo "$file_line" | cut -d" " -f1)"
            file_mtime="$(echo "$file_line" | cut -d" " -f2)"
            file_path="$(echo "$file_line" | cut -d" " -f3-)"

            if [ "$file_pkg_name" = "$error_pkg_name" ]; then
                final_err="$ERR_FILE"
                continue
            fi

            if [ "$file_pkg_name" != "$pkg_name" ]; then
                pkg_name="$file_pkg_name"
                pkg_retain_extra="$option_retain_extra_notinstalled"
                pacman -Q "$pkg_name" &> /dev/null
                pacman_err="$?"
                if [ "$pacman_err" -eq 0 ]; then
                    pkg_retain_extra="$option_retain_extra_installed"
                elif [ "$pacman_err" -ne 1 ]; then
                    print_error "failed for file:" "$file_path"
                    final_err="$ERR_FILE"
                    continue
                fi
                pkg_files_retained=0
            fi

            action=retain
            if [ "$file_mtime" -lt "$mtime_threshold" ]; then
                if [ "$pkg_files_retained" -eq "$pkg_retain_extra" ]; then
                    action=delete
                else
                    ((pkg_files_retained+=1))
                fi
            fi

            print_verbose "$action: $file_path"
            if [ "$option_dry_run" = n ] && [ "$action" = delete ]; then
                rm "$file_path" || {
                    print_error "failed for file:" "$file_path"
                    final_err="$ERR_FILE"
                }
            fi
        done

        return "$final_err"

    }

    combine_errors "${PIPESTATUS[@]}"
}


getopt -T &> /dev/null
if [ "$?" -ne 4 ]; then
    err "$ERR_OTHER" "unsupported version of \`getopt'"
fi
options_script="$(getopt --name "$PROGRAM" --shell bash \
    --options "$SHORT_OPTIONS" --longoptions "$LONG_OPTIONS" -- "$@")"
getopt_code="$?"
if [ "$getopt_code" -eq 1 ]; then
    usage_err
elif [ "$getopt_code" -ne 0 ]; then
    exit 1
fi
eval set -- "$options_script"
read_options "$@"
expire_cache
